# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Для анализа возьмите любые 1-3 ваших программы. Результаты анализа вставьте в виде комментариев к коду.

# Версия python: Python 3.5.2
# Разрядность: 64 (x86_64)

import random
import sys


'''

# Урок 1 задание 3
#
#
#  3. По введенным пользователем координатам двух точек вывести уравнение прямой, проходящей через эти точки.
#
x1, y1 = [float(i) for i in input('Введите координаты первой точки через пробел (x y): ').split()]
x2, y2 = [float(i) for i in input('Введите координаты второй точки через пробел (x y): ').split()]

# Уравнение прямой: (y1 - y2)x + (x2 - x1)y + (x1*y2 - x2 * y1) = 0
print('Уравнение прямой: {}x + {}y + {} = 0'.format((y1 - y2), (x2 - x1), (x1*y2 - x2 * y1)))

print(sys.getsizeof(x1))
total = [x1, y1, x2, y2]
total_size = 0
for i in total:
    total_size = total_size + sys.getsizeof(i)
print('Используемая память: {} байт'.format(total_size))
# Получилось 96 байт при относительно любых (я пробовала на маленьких и больших (несколько сотен тысяч) цифрах) цифрах.
# 24 байта на каждую float цифру
########################################################################################################################

'''




# Урок 2 задание 7
#
# 7. Написать программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство:
# 1+2+...+n = n(n+1)/2, где n – любое натуральное число.

total_size = 0
count = int(input('Введите количество элементов:\n'))
total_size = total_size + sys.getsizeof(count)

s = 0
right = 0

right = count * (count + 1) / 2
total_size = total_size + sys.getsizeof(right)

while count != 0:
    s = s + count
    count -= 1
total_size = total_size + sys.getsizeof(s)
print('{} = {}'.format(float(s), right))







'''

# Урок 3 задание 2
#
# 2. Во втором массиве сохранить индексы четных элементов первого массива.
# Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй массив надо заполнить
# значениями 0, 3, 4, 5 (индексация начинается с нуля), т.к. именно в этих позициях первого массива стоят четные числа.

size = 10

limit = 20

array = [random.randint(0, limit) for i in range(size)]

array_2 = []
# print(array)

for i, v in enumerate(array):
    if v % 2 == 0:
        array_2.append(i)
        print(sys.getsizeof(array_2))
print(array_2)
print(sys.getsizeof(array_2))
print(sys.getsizeof(array))



a = 345435


print(id(a))
print(sys.getsizeof(a))
print(sys.getrefcount(a))
'''
